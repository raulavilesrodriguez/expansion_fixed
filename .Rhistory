source("C:/Users/bravi/projects/expansionFija2023/expansion2023.R", echo=TRUE)
View(df.lineas)
df.poblacion <- read_excel('poblacion.xlsx')
View(df.poblacion)
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
source("C:/Users/bravi/projects/expansionFija2023/expansion2023.R", echo=TRUE)
source("C:/Users/bravi/projects/expansionFija2023/expansion2023.R", echo=TRUE)
df.poblacion$poblacion[16]
df.poblacion$poblacion[16] + df.poblacion$poblacion[17]
df.lineas$POPULAR[10]
df.lineas$POPULAR[11]
df.lineas$RESIDENCIAL[11]
df.lineas$RESIDENCIAL[12]
df.lineas$RESIDENCIAL[11] + df.lineas$RESIDENCIAL[12]
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas <- df.lineas |>
mutate(total = POPULAR + RESIDENCIAL + COMERCIAL + `LÍNEAS DE SERVICIO` + `LÍNEAS DE SERVICIO` + `TERMINALES DE USO PUBLICO`)
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas <- df.lineas |>
mutate(total = POPULAR +
RESIDENCIAL +
COMERCIAL +
`LÍNEAS DE SERVICIO`  +
`TERMINALES DE USO PUBLICO`)
df.lineas <- df.lineas[, c(1, 7, 8, 29)]
View(df.lineas)
df.lineas <- df.lineas |> group_by(DPA_PARROQ)
df.lineas$DPA_PARROQ[2]
df.lineas$DPA_PARROQ[2] == df.lineas$DPA_PARROQ[3]
df.lineas <- df.lineas |> group_by(DPA_PARROQ)
df.lineas <- df.lineas |> group_by(DPA_PARROQ) |>
summarise(total2 = sum(total))
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr) # to split strings
library(hrbrthemes)
library(viridis) # pallette of colors
library(viridisLite) # pallette of colors
library(highcharter)
library(writexl)
#________Wrangling_________
df.lineas <- read_excel('CONSOLIDADO_STF_SEPTIEMBRE_2023.xlsx')
df.poblacion <- read_excel('poblacion.xlsx')
# transform to numeric the poblation variable
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
df.poblacion <- df.poblacion |> mutate(poblacion= str_replace(poblacion, "\\.", ""))
df.poblacion[,9] <- lapply(df.poblacion[,9], as.numeric)
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas <- df.lineas |>
mutate(total = POPULAR +
RESIDENCIAL +
COMERCIAL +
`LÍNEAS DE SERVICIO`  +
`TERMINALES DE USO PUBLICO`)
df.lineas <- df.lineas[, c(1, 7, 8, 29)]
df.lineas <- df.lineas |> group_by(DPA_PARROQ) |>
summarise(
OPERADORA = unique(OPERADORA),
PARROQUIA = unique(PARROQUIA),
total2 = sum(total)
)
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr) # to split strings
library(hrbrthemes)
library(viridis) # pallette of colors
library(viridisLite) # pallette of colors
library(highcharter)
library(writexl)
#________Wrangling_________
df.lineas <- read_excel('CONSOLIDADO_STF_SEPTIEMBRE_2023.xlsx')
df.poblacion <- read_excel('poblacion.xlsx')
# transform to numeric the poblation variable
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
df.poblacion <- df.poblacion |> mutate(poblacion= str_replace(poblacion, "\\.", ""))
df.poblacion[,9] <- lapply(df.poblacion[,9], as.numeric)
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas <- df.lineas |>
mutate(total = POPULAR +
RESIDENCIAL +
COMERCIAL +
`LÍNEAS DE SERVICIO`  +
`TERMINALES DE USO PUBLICO`)
df.lineas <- df.lineas[, c(1, 7, 8, 29)]
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr) # to split strings
library(hrbrthemes)
library(viridis) # pallette of colors
library(viridisLite) # pallette of colors
library(highcharter)
library(writexl)
#________Wrangling_________
df.lineas <- read_excel('CONSOLIDADO_STF_SEPTIEMBRE_2023.xlsx')
df.poblacion <- read_excel('poblacion.xlsx')
# transform to numeric the poblation variable
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
df.poblacion <- df.poblacion |> mutate(poblacion= str_replace(poblacion, "\\.", ""))
df.poblacion[,9] <- lapply(df.poblacion[,9], as.numeric)
colnames(df.lineas)[7] <- "DPA_PARROQ"
View(df.lineas)
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr) # to split strings
library(hrbrthemes)
library(viridis) # pallette of colors
library(viridisLite) # pallette of colors
library(highcharter)
library(writexl)
#________Wrangling_________
df.lineas <- read_excel('CONSOLIDADO_STF_SEPTIEMBRE_2023.xlsx')
df.poblacion <- read_excel('poblacion.xlsx')
# transform to numeric the poblation variable
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
df.poblacion <- df.poblacion |> mutate(poblacion= str_replace(poblacion, "\\.", ""))
df.poblacion[,9] <- lapply(df.poblacion[,9], as.numeric)
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas <- df.lineas |> mutate_all(list(~str_replace(., "NA", 0)))
df.lineas <- df.lineas |> mutate_all(list(~str_replace(., "NA", "0")))
df.lineas <- df.lineas |> mutate_all(list(~str_replace(., "", "0")))
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr) # to split strings
library(hrbrthemes)
library(viridis) # pallette of colors
library(viridisLite) # pallette of colors
library(highcharter)
library(writexl)
#________Wrangling_________
df.lineas <- read_excel('CONSOLIDADO_STF_SEPTIEMBRE_2023.xlsx')
df.poblacion <- read_excel('poblacion.xlsx')
# transform to numeric the poblation variable
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
df.poblacion <- df.poblacion |> mutate(poblacion= str_replace(poblacion, "\\.", ""))
df.poblacion[,9] <- lapply(df.poblacion[,9], as.numeric)
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas <- df.lineas |> mutate(POPULAR = str_replace(POPULAR, "NA", "0"))
View(df.lineas)
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr) # to split strings
library(hrbrthemes)
library(viridis) # pallette of colors
library(viridisLite) # pallette of colors
library(highcharter)
library(writexl)
#________Wrangling_________
df.lineas <- read_excel('CONSOLIDADO_STF_SEPTIEMBRE_2023.xlsx')
df.poblacion <- read_excel('poblacion.xlsx')
# transform to numeric the poblation variable
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
df.poblacion <- df.poblacion |> mutate(poblacion= str_replace(poblacion, "\\.", ""))
df.poblacion[,9] <- lapply(df.poblacion[,9], as.numeric)
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas <- df.lineas |> mutate(POPULAR = str_replace(POPULAR, "", "0"))
df.lineas <- df.lineas |> mutate(POPULAR = str_replace(POPULAR, "NA", 0))
df.lineas <- df.lineas |> mutate(POPULAR = str_replace(POPULAR, "NA", 0))
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr) # to split strings
library(hrbrthemes)
library(viridis) # pallette of colors
library(viridisLite) # pallette of colors
library(highcharter)
library(writexl)
#________Wrangling_________
df.lineas <- read_excel('CONSOLIDADO_STF_SEPTIEMBRE_2023.xlsx')
df.poblacion <- read_excel('poblacion.xlsx')
# transform to numeric the poblation variable
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
df.poblacion <- df.poblacion |> mutate(poblacion= str_replace(poblacion, "\\.", ""))
df.poblacion[,9] <- lapply(df.poblacion[,9], as.numeric)
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas[is.na(df.lineas)] <- 0
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr) # to split strings
library(hrbrthemes)
library(viridis) # pallette of colors
library(viridisLite) # pallette of colors
library(highcharter)
library(writexl)
#________Wrangling_________
df.lineas <- read_excel('CONSOLIDADO_STF_SEPTIEMBRE_2023.xlsx')
df.poblacion <- read_excel('poblacion.xlsx')
# transform to numeric the poblation variable
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
df.poblacion <- df.poblacion |> mutate(poblacion= str_replace(poblacion, "\\.", ""))
df.poblacion[,9] <- lapply(df.poblacion[,9], as.numeric)
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas[is.na(df.lineas)] <- '0'
View(df.lineas)
df.lineas[is.na(df.lineas)][11]
df.lineas[is.na(df.lineas)]
df.lineas[is.na(df.lineas$POPULAR)]
is.na(df.lineas)
is.na(df.lineas$POPULAR)
is.na(df.lineas)
is.na(df.lineas$POPULAR)
is.na(df.lineas)
which(is.na(df.lineas$POPULAR))
df.lineas[which(is.na(df.lineas$POPULAR)), 11] <- 0
which(colnames(df.lines) == 'POPULAR')
which(colnames(df.lineas) == 'POPULAR')
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readxl)
library(stringr)
library(purrr) # to split strings
library(hrbrthemes)
library(viridis) # pallette of colors
library(viridisLite) # pallette of colors
library(highcharter)
library(writexl)
#________Wrangling_________
df.lineas <- read_excel('CONSOLIDADO_STF_SEPTIEMBRE_2023.xlsx')
df.poblacion <- read_excel('poblacion.xlsx')
# transform to numeric the poblation variable
colnames(df.poblacion)[colnames(df.poblacion) == '2020'] <- 'poblacion'
df.poblacion <- df.poblacion |> mutate(poblacion= str_replace(poblacion, "\\.", ""))
df.poblacion[,9] <- lapply(df.poblacion[,9], as.numeric)
colnames(df.lineas)[7] <- "DPA_PARROQ"
df.lineas[which(is.na(df.lineas$POPULAR)), which(colnames(df.lineas) == 'POPULAR')] <- 0
df.lineas[which(is.na(df.lineas$RESIDENCIAL)), which(colnames(df.lineas) == 'RESIDENCIAL')] <- 0
df.lineas[which(is.na(df.lineas$COMERCIAL)), which(colnames(df.lineas) == 'COMERCIAL')] <- 0
df.lineas[which(is.na(df.lineas$`LÍNEAS DE SERVICIO`)), which(colnames(df.lineas) == 'LÍNEAS DE SERVICIO')] <- 0
df.lineas[which(is.na(df.lineas$`TERMINALES DE USO PUBLICO`)), which(colnames(df.lineas) == 'TERMINALES DE USO PUBLICO')] <- 0
df.lineas <- df.lineas |>
mutate(total = POPULAR +
RESIDENCIAL +
COMERCIAL +
`LÍNEAS DE SERVICIO`  +
`TERMINALES DE USO PUBLICO`)
df.lineas <- df.lineas[, c(1, 7, 8, 29)]
View(df.lineas)
df.lineas <- df.lineas |> group_by(DPA_PARROQ) |>
summarise(
OPERADORA = unique(OPERADORA),
PARROQUIA = unique(PARROQUIA),
total2 = sum(total)
)
View(df.lineas)
source("C:/Users/bravi/projects/expansionFija2023/expansion2023.R", echo=TRUE)
View(df.lineas)
source("C:/Users/bravi/projects/expansionFija2023/expansion2023.R", echo=TRUE)
View(df.lineas)
View(df.lineas)
View(df.lineas)
sum(df.lineas$total2)
df.total <- left_join(df.poblacion, df.lineas, by = "DPA_PARROQ")
View(df.total)
